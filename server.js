const express = require('express');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.BOT_TOKEN || '8176164331:AAHo6t3dka7-joe0DPi_hBMiDHJ35i6obfA';
const bot = new TelegramBot(token, { polling: true });

bot.on('callback_query', async (query) => {
  const callbackId = query.id;

  try {
    await bot.answerCallbackQuery(callbackId);
    await bot.sendMessage(query.from.id, `–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${query.data}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query:', err.message);
  }
});

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
const GENERATED_DIR = path.join(__dirname, 'generated_sites');
const SITE_TEMPLATE_DIR = path.join(__dirname, 'site');

if (!fs.existsSync(GENERATED_DIR)) fs.mkdirSync(GENERATED_DIR);

// üëá –í–°–¢–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –≤ /site
app.use('/site', express.static(SITE_TEMPLATE_DIR));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const folder = path.join(GENERATED_DIR, req.body.siteId);
    if (!fs.existsSync(folder)) fs.mkdirSync(folder);
    cb(null, folder);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});
const upload = multer({ storage });

const axios = require('axios');

app.post('/upload', upload.array('photos', 30), async (req, res) => {

  const imgBB_API_KEY = process.env.IMGBB_API_KEY; // –∫–ª—é—á –∏–∑ .env
  console.log('IMGBB_API_KEY:', imgBB_API_KEY);
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', req.files.length);

  try {
    const uploadedUrls = [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –Ω–∞ imgBB
    for (const file of req.files) {
      const imageBase64 = fs.readFileSync(file.path, { encoding: 'base64' });

   const FormData = require('form-data');

const formData = new FormData();
formData.append('key', imgBB_API_KEY);
formData.append('image', imageBase64);
formData.append('name', file.filename);

const response = await axios.post('https://api.imgbb.com/1/upload', formData, {
  headers: formData.getHeaders()
});


      uploadedUrls.push(response.data.data.url);

      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      fs.unlinkSync(file.path);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    const cardsHTML = uploadedUrls.map(url => `<li><img src="${url}" class="card" alt="card"></li>`).join('\n');

    // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω, CSS –∏ JS –∏–∑ –ø–∞–ø–∫–∏ site
    const template = fs.readFileSync(path.join(SITE_TEMPLATE_DIR, 'template.html'), 'utf8');
    const css = fs.readFileSync(path.join(SITE_TEMPLATE_DIR, 'style.css'), 'utf8');
    const js = fs.readFileSync(path.join(SITE_TEMPLATE_DIR, 'main.js'), 'utf8');

    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, CSS –∏ JS –≤ —à–∞–±–ª–æ–Ω
    let finalHTML = template.replace('<!--CARDS_HERE-->', cardsHTML);
    finalHTML = finalHTML.replace('<!--INLINE_CSS-->', `<style>${css}</style>`);
    finalHTML = finalHTML.replace('<!--INLINE_JS-->', `<script>${js}</script>`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π siteId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const siteId = req.body.siteId || uuidv4();
    const siteFolder = path.join(GENERATED_DIR, siteId);

    if (!fs.existsSync(siteFolder)) fs.mkdirSync(siteFolder, { recursive: true });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º index.html –∏ –∫–æ–ø–∏—Ä—É–µ–º style.css –∏ main.js –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    fs.writeFileSync(path.join(siteFolder, 'index.html'), finalHTML);
    fs.writeFileSync(path.join(siteFolder, 'style.css'), css);
    fs.writeFileSync(path.join(siteFolder, 'main.js'), js);

    const bgSourcePath = path.join(SITE_TEMPLATE_DIR, 'foto.jpeg');
const bgDestPath = path.join(siteFolder, 'foto.jpeg');
if (fs.existsSync(bgSourcePath)) {
  fs.copyFileSync(bgSourcePath, bgDestPath);
}


    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç—É
    const url = `${req.protocol}://${req.get('host')}/generated_sites/${siteId}/index.html`;
    res.json({ url });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ imgBB:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' });
  }
});



app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
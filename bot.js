const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');



require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const generateCard = require('./cardGenerator');

const token = process.env.TG_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const userStates = {};
const userData = {};

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const welcomeText = `–ü—Ä–∏–≤–µ—Ç! üíñ
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫ –±–ª–∏–∑–∫–∏–º –∏–ª–∏ –¥–ª—è —Å–µ–±—è üòä`;

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ üíå', callback_data: 'start_creation' }]
      ]
    }
  };

  bot.sendMessage(chatId, welcomeText, options);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const chatId = message.chat.id;
  const data = callbackQuery.data;
  
  await bot.answerCallbackQuery(callbackQuery.id);
  
if (data === 'start_creation') {
  await bot.sendMessage(chatId, '–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–∏—à–ª–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —Ñ–æ—Ç–æ üì∏');
  userStates[chatId] = 'awaiting_first_photo';
  userData[chatId] = { photos: [] };
} else if (data === 'create_new') {
    await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ üì∏');
    userStates[chatId] = 'awaiting_first_photo';
    userData[chatId] = { photos: [] };
     } else if (data === 'nev_cards') {
    await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ üì∏');
    userStates[chatId] = 'awaiting_first_photo';
    userData[chatId] = { photos: [] };
  } else if (data === 'menu') {
  const menuText = '–í–∞—à–µ –º–µ–Ω—é üóÇ';
  const menuOptions = {
    reply_markup: {
      inline_keyboard: [
         [{ text: '–°–æ–∑–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚ûïÔ∏è', callback_data: 'nev_cards' }],
        [{ text: '–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç üåê', callback_data: 'get_website' }],
       [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨', url: 'https://t.me/o_t_z_i_v_25' }]
         ]}};
         

  await bot.sendMessage(chatId, menuText, menuOptions);

  delete userStates[chatId];
  delete userData[chatId];
} else if (data === 'get_website') {
  const siteId = uuidv4();
  userStates[chatId] = 'awaiting_website_photos';
  userData[chatId] = { photos: [], siteId };

  await bot.sendMessage(chatId, `–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç 8 –¥–æ 30 —à—Ç—É–∫, –∏–Ω–∞—á–µ —Å–∞–π—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)üì§\n\nP.S. –ü–æ—Å–ª–µ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`);
}

  

});

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –∫–∞–∫ –±—É—Ñ–µ—Ä–∞
async function downloadPhotoBuffer(fileId) {
  const fileLink = await bot.getFileLink(fileId);
  const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
  return Buffer.from(response.data);
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('message', async (msg) => {
  try {
    const chatId = msg.chat.id;

    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    
    if (msg.text && msg.text.startsWith('/') && !userStates[chatId]) return;

    const state = userStates[chatId];

    if (userStates[chatId] === 'awaiting_website_photos') {
  if (msg.photo && msg.photo.length > 0) {
    const photo = msg.photo[msg.photo.length - 1];
    userData[chatId].photos.push(photo.file_id);
    await bot.sendMessage(chatId, `–§–æ—Ç–æ ${userData[chatId].photos.length} –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ`);
    return;
  }

  if (msg.text && msg.text.toLowerCase().includes('–≥–æ—Ç–æ–≤–æ')) {
    const fileIds = userData[chatId].photos;

    if (fileIds.length === 0) {
      await bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üò¢');
      return;
    }

    await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∫–∞.... ‚è≥');

    // –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const form = new FormData();
    form.append('siteId', userData[chatId].siteId);

    for (let i = 0; i < fileIds.length; i++) {
      const fileId = fileIds[i];
      const link = await bot.getFileLink(fileId);
      const response = await axios.get(link, { responseType: 'stream' });
      form.append('photos', response.data, { filename: `${Date.now()}-${i}.jpg` });
    }

    try {
      const uploadResponse = await axios.post(
        'http://localhost:3000/upload',
        form,
        { headers: form.getHeaders() }
      );

     const siteId = userData[chatId].siteId;
const filePath = path.join(__dirname, 'generated_sites', siteId, 'index.html');

if (fs.existsSync(filePath)) {
  await bot.sendDocument(chatId, filePath, {
    caption: `üìÑ –í–æ—Ç –≤–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML-—Ñ–∞–π–ª —Å–∞–π—Ç–∞!`,
    reply_markup: {
      inline_keyboard: [
        [{ text: '–í –º–µ–Ω—é üóÇ', callback_data: 'menu' }]
      ]
    }
  });
} else {
  await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ HTML-—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
}


    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', err);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚õî\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–∏: @taka3003');
    }

    delete userStates[chatId];
    delete userData[chatId];
    return;
  }

  await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ üì∏');
  return;
}


    if (state === 'awaiting_first_photo') {
      if (msg.photo && msg.photo.length > 0) {
        const photo = msg.photo[msg.photo.length - 1];
        userData[chatId].photos.push(photo.file_id);
        await bot.sendMessage(chatId, '–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ üéß');
        userStates[chatId] = 'awaiting_song_title';
      } else {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ üì∏');
      }
      return;
    }

    if (state === 'awaiting_song_title') {
      userData[chatId].songTitle = msg.text;
      await bot.sendMessage(chatId, '–ö—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Å–Ω—é? üéô');
      userStates[chatId] = 'awaiting_song_artist';
      return;
    }

    if (state === 'awaiting_song_artist') {
      userData[chatId].songArtist = msg.text;
      await bot.sendMessage(chatId, '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –æ—Ç—Ä—ã–≤–æ–∫ üé∂');
      userStates[chatId] = 'awaiting_song_excerpt';
      return;
    }

    if (state === 'awaiting_song_excerpt') {
      userData[chatId].songExcerpt = msg.text;

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
      const photoFileId = userData[chatId].photos[0];
      const photoBuffer = await downloadPhotoBuffer(photoFileId);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∫—É –≤ –±—É—Ñ–µ—Ä–µ
      const cardBuffer = await generateCard(
        photoBuffer,
        userData[chatId].songTitle,
        userData[chatId].songArtist,
        userData[chatId].songExcerpt
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendPhoto(chatId, cardBuffer, {
        caption: `–ì–æ—Ç–æ–≤–æ!
–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç üéâ
–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è`,
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –æ—Ç–∫—Ä—ã—Ç–∫—É üé®', callback_data: 'create_new' }],
            [{ text: '–ú–µ–Ω—é üóÇ', callback_data: 'menu' }]
          ]
        }
      });

      // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      delete userStates[chatId];
      delete userData[chatId];

      return;
    }

  } catch (error) {
    console.error(error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚õî\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–∏: @taka3003');
  }
});